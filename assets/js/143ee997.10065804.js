"use strict";(self.webpackChunksap_cloud_sdk_documentation=self.webpackChunksap_cloud_sdk_documentation||[]).push([[55322],{75679:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>u,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"tutorials/address-manager/change","title":"Building an Address Manager Application with the SAP Cloud SDK - Part 2","description":"Build an Address Manager Application with the SAP Cloud SDK - Part 2","source":"@site/docs-js_versioned_docs/version-v3/tutorials/address-manager/change-addresses.mdx","sourceDirName":"tutorials/address-manager","slug":"/tutorials/address-manager/change","permalink":"/cloud-sdk/docs/js/v3/tutorials/address-manager/change","draft":false,"unlisted":false,"editUrl":"https://github.com/SAP/cloud-sdk/edit/main/docs-js_versioned_docs/version-v3/tutorials/address-manager/change-addresses.mdx","tags":[],"version":"v3","frontMatter":{"id":"change","title":"Building an Address Manager Application with the SAP Cloud SDK - Part 2","sidebar_label":"Change Address Data","description":"Build an Address Manager Application with the SAP Cloud SDK - Part 2","keywords":["sap","cloud","sdk","cloud native","cloud sdk","sap cloud sdk","tutorial","address manager"]},"sidebar":"docsJsSidebar","previous":{"title":"Read Address Data","permalink":"/cloud-sdk/docs/js/v3/tutorials/address-manager/read"},"next":{"title":"Multi-Tenant Application","permalink":"/cloud-sdk/docs/js/v3/tutorials/multi-tenant-application"}}');var t=n(74848),a=n(28453),d=n(65537),i=n(79329);const o={id:"change",title:"Building an Address Manager Application with the SAP Cloud SDK - Part 2",sidebar_label:"Change Address Data",description:"Build an Address Manager Application with the SAP Cloud SDK - Part 2",keywords:["sap","cloud","sdk","cloud native","cloud sdk","sap cloud sdk","tutorial","address manager"]},u=void 0,l={},c=[{value:"Overview",id:"overview",level:2},{value:"Create an Address",id:"create-an-address",level:2},{value:"Test Create Service",id:"test-create-service",level:3},{value:"Update Service",id:"update-service",level:2},{value:"Test Update Service",id:"test-update-service",level:3},{value:"Delete Address",id:"delete-address",level:2},{value:"Test Delete Service",id:"test-delete-service",level:3},{value:"Final Code Review",id:"final-code-review",level:2}];function h(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(s.p,{children:["In the ",(0,t.jsx)(s.a,{href:"/cloud-sdk/docs/js/v3/tutorials/address-manager/read",children:"first part"})," of the tutorial, you implemented the read operation on business partners and the related address information.\nIn this part you will learn:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"How to create a new address."}),"\n",(0,t.jsx)(s.li,{children:"How to update an existing address."}),"\n",(0,t.jsx)(s.li,{children:"How to delete an existing address."}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"create-an-address",children:"Create an Address"}),"\n",(0,t.jsxs)(s.p,{children:["After reading the data in the first part of the tutorial, it is now time to change the data.\nYou will use the ",(0,t.jsx)(s.code,{children:"businessPartnerAddressApi"})," to adjust the addresses.\nYou start with the creation of new addresses.\nAdd a service implementation in the ",(0,t.jsx)(s.code,{children:"business-partner.service.ts"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'  createAddress(\n    address: Record<string, any>,\n    businessPartnerId: string\n  ): Promise<BusinessPartnerAddress> {\n    const businessPartnerAddress = businessPartnerAddressApi\n      .entityBuilder()\n      .fromJson({ businessPartner: businessPartnerId, ...address });\n    return businessPartnerAddressApi\n      .requestBuilder()\n      .create(businessPartnerAddress)\n      .execute({ url: "http://localhost:3000" });\n  }\n'})}),"\n",(0,t.jsx)(s.p,{children:"Use the entity builder to create a new address object from the input.\nThe business partner ID is added to the address object.\nThis is mandatory to define for which business partner the address is created.\nUse the request builder to build a create request and execute it against the mock server."}),"\n",(0,t.jsxs)(s.p,{children:["You need to adjust the ",(0,t.jsx)(s.code,{children:"business-partner.controller.ts"})," to expose the new service.\nSince you want to create data, a ",(0,t.jsx)(s.code,{children:"POST"})," request is needed:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'  @Post("/:businessPartnerId/address")\n  @HttpCode(201)\n  createAddress(\n    @Body() requestBody: Record<string, any>,\n    @Param("businessPartnerId") businessPartnerId: string\n  ): Promise<BusinessPartnerAddress> {\n    return this.businessPartnerService.createAddress(requestBody, businessPartnerId);\n  }\n'})}),"\n",(0,t.jsx)(s.p,{children:"The ID of the business partner is taken from the URL of the request and the new address from the body."}),"\n",(0,t.jsx)(s.h3,{id:"test-create-service",children:"Test Create Service"}),"\n",(0,t.jsxs)(s.p,{children:["To test the new service, you need an HTTP client like ",(0,t.jsx)(s.a,{href:"https://learning.postman.com/docs/getting-started/installation-and-updates/",children:"postman"})," to create a ",(0,t.jsx)(s.code,{children:"POST"})," request.\nCreate a new request with the following parameters:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'POST http://localhost:8080/business-partner/1003764/address\nBODY\n{\n    "postalCode": "14469",\n    "cityName": "Potsdam",\n    "streetName": "Konrad-Zuse-Ring",\n    "houseNumber": "10"\n}\n'})}),"\n",(0,t.jsxs)(s.p,{children:["You find the ID of a business partner via the endpoint ",(0,t.jsx)(s.code,{children:"http://localhost:8080/business-partner"}),".\nThe request should return ",(0,t.jsx)(s.code,{children:"201"})," as a ",(0,t.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#successful_responses",children:"status code"}),"."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"Create an address with postman.",src:n(77980).A+"",width:"2534",height:"760"})}),"\n",(0,t.jsxs)(s.p,{children:["If you execute ",(0,t.jsx)(s.code,{children:"GET http://localhost:8080/business-partner/1003764"})," afterward, you should see the additional address for the business partner."]}),"\n",(0,t.jsx)(s.h2,{id:"update-service",children:"Update Service"}),"\n",(0,t.jsxs)(s.p,{children:["As a next step, you learn how to update existing addresses.\nThis is done using the ",(0,t.jsx)(s.code,{children:"update"})," request builder.\nAdd the following code in the ",(0,t.jsx)(s.code,{children:"business-partner.service.ts"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'  updateAddress(\n    address: Record<string, any>,\n    businessPartnerId: string,\n    addressId: string\n  ): Promise<BusinessPartnerAddress> {\n    const businessPartnerAddress = businessPartnerAddressApi\n      .entityBuilder()\n      .fromJson({ businessPartner:businessPartnerId, addressId, ...address });\n    return businessPartnerAddressApi\n      .requestBuilder()\n      .update(businessPartnerAddress)\n      .execute({ url: "http://localhost:3000" });\n  }\n'})}),"\n",(0,t.jsx)(s.p,{children:"First, an address object is built from the user input.\nIt contains the ID of the business partner and the address to be updated.\nThis is necessary because a business partner can contain multiple addresses."}),"\n",(0,t.jsxs)(s.p,{children:["Expose the service implementation via the ",(0,t.jsx)(s.code,{children:"business-partner.controller.ts"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"  @Put('/:businessPartnerId/address/:addressId')\n  updateBusinessPartnerAddress(\n    @Body() requestBody: Record<string, any>,\n    @Param('businessPartnerId') businessPartnerId: string,\n    @Param('addressId') addressId: string\n  ): Promise<BusinessPartnerAddress> {\n    return this.businessPartnerService.updateAddress(requestBody,businessPartnerId,addressId);\n  }\n"})}),"\n",(0,t.jsx)(s.p,{children:"The path of the service contains the ID of the business partner and the address to be updated.\nThe new address is given in the payload."}),"\n",(0,t.jsx)(s.h3,{id:"test-update-service",children:"Test Update Service"}),"\n",(0,t.jsxs)(s.p,{children:["The update request is triggered by the ",(0,t.jsx)(s.code,{children:"PUT"})," method.\nExecute the update request in your HTTP client (e.g. ",(0,t.jsx)(s.a,{href:"https://learning.postman.com/docs/getting-started/installation-and-updates/",children:"postman"}),"):"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'PUT http://localhost:8080/business-partner/1003764/address/28238\nBODY\n{\n    "houseNumber": "123"\n}\n'})}),"\n",(0,t.jsxs)(s.p,{children:["After the update, a ",(0,t.jsx)(s.code,{children:"GET http://localhost:8080/business-partner/1003764"})," should show the updated house number 123."]}),"\n",(0,t.jsx)(s.h2,{id:"delete-address",children:"Delete Address"}),"\n",(0,t.jsxs)(s.p,{children:["After creating and updating addresses, it is time to delete an address.\nAlso here you start with the service implementation in ",(0,t.jsx)(s.code,{children:"business-partner.service.ts"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'  deleteAddress(businessPartnerId: string, addressId: string): Promise<void> {\n    return businessPartnerAddressApi\n      .requestBuilder()\n      .delete(businessPartnerId, addressId)\n      .execute({ url: "http://localhost:3000" });\n  }\n'})}),"\n",(0,t.jsxs)(s.p,{children:["As for the other operations, the ",(0,t.jsx)(s.code,{children:"requestBuilder"})," is used to build the ",(0,t.jsx)(s.code,{children:"delete"})," request.\nThe method needs the two IDs to identify the business partner and address you want to delete."]}),"\n",(0,t.jsxs)(s.p,{children:["The delete endpoint is exposed in the ",(0,t.jsx)(s.code,{children:"business-partner.controller.ts"})," via the following code:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'  @Delete("/:businessPartnerId/address/:addressId")\n  @HttpCode(204)\n  deleteBusinessPartnerAddress(\n    @Param("businessPartnerId") businessPartnerId: string,\n    @Param("addressId") addressId: string\n  ): Promise<void> {\n    return this.businessPartnerService.deleteAddress(\n      businessPartnerId,\n      addressId\n    );\n  }\n'})}),"\n",(0,t.jsxs)(s.p,{children:["You use the HTTP method ",(0,t.jsx)(s.code,{children:"DELETE"})," to trigger a deletion and the status 204 indicates a successful deletion."]}),"\n",(0,t.jsx)(s.h3,{id:"test-delete-service",children:"Test Delete Service"}),"\n",(0,t.jsxs)(s.p,{children:["You can test the service in the following way.\nExecute ",(0,t.jsx)(s.code,{children:"GET http://localhost:8080/business-partner/1003764"})," and note the ID of an address you want to delete e.g. 28241.\nThen execute ",(0,t.jsx)(s.code,{children:"DELETE http://localhost:8080/business-partner/1003764/address/28241"})," in your HTTP client.\nThis should return 204 if existing IDs are passed.\nTo verify you can execute ",(0,t.jsx)(s.code,{children:"GET http://localhost:8080/business-partner/1003764"})," afterward and the selected address should be removed."]}),"\n",(0,t.jsx)(s.h2,{id:"final-code-review",children:"Final Code Review"}),"\n",(0,t.jsxs)(s.p,{children:["In this tutorial, you learned how to create, update and delete addresses using the SAP Cloud SDK.\nFirst, an implementation is added in the service class.\nThen the implementation is exposed in the controller class.\nThe result of this and the ",(0,t.jsx)(s.a,{href:"/cloud-sdk/docs/js/v3/tutorials/address-manager/read",children:"previous tutorial"})," is an API to manage business partner addresses."]}),"\n",(0,t.jsx)(s.p,{children:"You can find the complete code below:"}),"\n",(0,t.jsxs)(d.A,{groupId:"code-files",defaultValue:"business-partner.service.ts",values:[{label:"business-partner.service.ts",value:"business-partner.service.ts"},{label:"business-partner.controller.ts",value:"business-partner.controller.ts"}],children:[(0,t.jsx)(i.A,{value:"business-partner.service.ts",className:"code-block-height-js thin-scrollbar",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"import { Injectable } from '@nestjs/common';\nimport {\n  BusinessPartner,\n  BusinessPartnerAddress,\n  businessPartnerService\n} from '../../services/business-partner-service';\nimport * as dotenv from 'dotenv';\n\ndotenv.config();\nconst { businessPartnerApi, businessPartnerAddressApi } =\n  businessPartnerService();\n\n/**\n * Service implementation of address API.\n */\n@Injectable()\nexport class BusinessPartnerService {\n  /**\n   * Gets a list of all business partners.\n   * @returns List of business partners.\n   */\n  async getAllBusinessPartners(): Promise<BusinessPartner[]> {\n    return businessPartnerApi\n      .requestBuilder()\n      .getAll()\n      .select(\n        businessPartnerApi.schema.BUSINESS_PARTNER,\n        businessPartnerApi.schema.FIRST_NAME,\n        businessPartnerApi.schema.LAST_NAME,\n        businessPartnerApi.schema.TO_BUSINESS_PARTNER_ADDRESS.select(\n          businessPartnerAddressApi.schema.BUSINESS_PARTNER,\n          businessPartnerAddressApi.schema.ADDRESS_ID\n        )\n      )\n      .filter(businessPartnerApi.schema.BUSINESS_PARTNER_CATEGORY.equals('1'))\n      .execute({ url: 'http://localhost:3000' });\n  }\n\n  /**\n   * Get a business partner by ID.\n   * @param id - ID of the business partner to be returned.\n   * @returns The business partner with the given ID.\n   */\n  getBusinessPartnerById(id: string): Promise<BusinessPartner> {\n    return businessPartnerApi\n      .requestBuilder()\n      .getByKey(id)\n      .select(\n        businessPartnerApi.schema.BUSINESS_PARTNER,\n        businessPartnerApi.schema.FIRST_NAME,\n        businessPartnerApi.schema.LAST_NAME,\n        businessPartnerApi.schema.TO_BUSINESS_PARTNER_ADDRESS.select(\n          businessPartnerAddressApi.schema.BUSINESS_PARTNER,\n          businessPartnerAddressApi.schema.ADDRESS_ID,\n          businessPartnerAddressApi.schema.POSTAL_CODE,\n          businessPartnerAddressApi.schema.CITY_NAME,\n          businessPartnerAddressApi.schema.STREET_NAME,\n          businessPartnerAddressApi.schema.HOUSE_NUMBER\n        )\n      )\n      .execute({ url: 'http://localhost:3000' });\n  }\n\n  /**\n   * Creates an address for a business partner.\n   * @param address - Address which is added to the business partner.\n   * @param id - ID of the business partner.\n   * @returns The address which was created.\n   */\n  public createAddress(\n    address: Record<string, any>,\n    id: string\n  ): Promise<BusinessPartnerAddress> {\n    const businessPartnerAddress = businessPartnerAddressApi\n      .entityBuilder()\n      .fromJson({ businessPartner: id, ...address });\n\n    return businessPartnerAddressApi\n      .requestBuilder()\n      .create(businessPartnerAddress)\n      .execute({ url: 'http://localhost:3000' });\n  }\n\n  /**\n   * Updates an address of a business partner.\n   * @param address - New address information after update. Existing values are overwritten, new ones are added.\n   * @param businessPartner - ID of business partner whose address is updated.\n   * @param addressId - ID of address which is updated.\n   * @returns - The address after update.\n   */\n  updateAddress(\n    address: Record<string, any>,\n    businessPartner: string,\n    addressId: string\n  ): Promise<BusinessPartnerAddress> {\n    const businessPartnerAddress = businessPartnerAddressApi\n      .entityBuilder()\n      .fromJson({ businessPartner, addressId, ...address });\n\n    return businessPartnerAddressApi\n      .requestBuilder()\n      .update(businessPartnerAddress)\n      .execute({ url: 'http://localhost:3000' });\n  }\n\n  /**\n   * Deletes an address of a business partner.\n   * @param businessPartner - ID of the business partner to be updated.\n   * @param addressId - ID of address to be deleted.\n   * @returns - Void.\n   */\n  deleteAddress(businessPartner: string, addressId: string): Promise<void> {\n    return businessPartnerAddressApi\n      .requestBuilder()\n      .delete(businessPartner, addressId)\n      .execute({ url: 'http://localhost:3000' });\n  }\n}\n"})})}),(0,t.jsx)(i.A,{value:"business-partner.controller.ts",className:"code-block-height-js thin-scrollbar",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  Param,\n  Post,\n  Put\n} from '@nestjs/common';\nimport {\n  BusinessPartner,\n  BusinessPartnerAddress\n} from '../../services/business-partner-service';\nimport { BusinessPartnerService } from './business-partner.service';\n\n@Controller('business-partner')\nexport class BusinessPartnerController {\n  constructor(\n    private readonly businessPartnerService: BusinessPartnerService\n  ) {}\n\n  @Get()\n  getAllBusinessPartners(): Promise<BusinessPartner[]> {\n    return this.businessPartnerService.getAllBusinessPartners();\n  }\n\n  @Get('/:id')\n  getBusinessPartnerById(@Param('id') id: string): Promise<BusinessPartner> {\n    return this.businessPartnerService.getBusinessPartnerById(id);\n  }\n\n  @Post('/:id/address')\n  @HttpCode(201)\n  createAddress(\n    @Body() requestBody: Record<string, any>,\n    @Param('id') id: string\n  ): Promise<BusinessPartnerAddress> {\n    return this.businessPartnerService.createAddress(requestBody, id);\n  }\n\n  @Put('/:businessPartnerId/address/:addressId')\n  updateBusinessPartnerAddress(\n    @Body() requestBody: Record<string, any>,\n    @Param('businessPartnerId') businessPartnerId: string,\n    @Param('addressId') addressId: string\n  ): Promise<BusinessPartnerAddress> {\n    return this.businessPartnerService.updateAddress(\n      requestBody,\n      businessPartnerId,\n      addressId\n    );\n  }\n\n  @Delete('/:businessPartnerId/address/:addressId')\n  @HttpCode(204)\n  deleteBusinessPartnerAddress(\n    @Param('businessPartnerId') businessPartnerId: string,\n    @Param('addressId') addressId: string\n  ): Promise<void> {\n    return this.businessPartnerService.deleteAddress(\n      businessPartnerId,\n      addressId\n    );\n  }\n}\n"})})})]})]})}function p(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},79329:(e,s,n)=>{n.d(s,{A:()=>d});n(96540);var r=n(34164);const t={tabItem:"tabItem_Ymn6"};var a=n(74848);function d(e){let{children:s,hidden:n,className:d}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(t.tabItem,d),hidden:n,children:s})}},65537:(e,s,n)=>{n.d(s,{A:()=>j});var r=n(96540),t=n(34164),a=n(65627),d=n(56347),i=n(50372),o=n(30604),u=n(11861),l=n(78749);function c(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:s}=e;return!!s&&"object"==typeof s&&"value"in s}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:s,children:n}=e;return(0,r.useMemo)((()=>{const e=s??function(e){return c(e).map((e=>{let{props:{value:s,label:n,attributes:r,default:t}}=e;return{value:s,label:n,attributes:r,default:t}}))}(n);return function(e){const s=(0,u.XI)(e,((e,s)=>e.value===s.value));if(s.length>0)throw new Error(`Docusaurus error: Duplicate values "${s.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[s,n])}function p(e){let{value:s,tabValues:n}=e;return n.some((e=>e.value===s))}function b(e){let{queryString:s=!1,groupId:n}=e;const t=(0,d.W6)(),a=function(e){let{queryString:s=!1,groupId:n}=e;if("string"==typeof s)return s;if(!1===s)return null;if(!0===s&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:s,groupId:n});return[(0,o.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const s=new URLSearchParams(t.location.search);s.set(a,e),t.replace({...t.location,search:s.toString()})}),[a,t])]}function m(e){const{defaultValue:s,queryString:n=!1,groupId:t}=e,a=h(e),[d,o]=(0,r.useState)((()=>function(e){let{defaultValue:s,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(s){if(!p({value:s,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${s}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return s}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:s,tabValues:a}))),[u,c]=b({queryString:n,groupId:t}),[m,P]=function(e){let{groupId:s}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(s),[t,a]=(0,l.Dv)(n);return[t,(0,r.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:t}),A=(()=>{const e=u??m;return p({value:e,tabValues:a})?e:null})();(0,i.A)((()=>{A&&o(A)}),[A]);return{selectedValue:d,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);o(e),c(e),P(e)}),[c,P,a]),tabValues:a}}var P=n(9136);const A={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=n(74848);function g(e){let{className:s,block:n,selectedValue:r,selectValue:d,tabValues:i}=e;const o=[],{blockElementScrollPositionUntilNextRender:u}=(0,a.a_)(),l=e=>{const s=e.currentTarget,n=o.indexOf(s),t=i[n].value;t!==r&&(u(s),d(t))},c=e=>{let s=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const n=o.indexOf(e.currentTarget)+1;s=o[n]??o[0];break}case"ArrowLeft":{const n=o.indexOf(e.currentTarget)-1;s=o[n]??o[o.length-1];break}}s?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":n},s),children:i.map((e=>{let{value:s,label:n,attributes:a}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:r===s?0:-1,"aria-selected":r===s,ref:e=>{o.push(e)},onKeyDown:c,onClick:l,...a,className:(0,t.A)("tabs__item",A.tabItem,a?.className,{"tabs__item--active":r===s}),children:n??s},s)}))})}function f(e){let{lazy:s,children:n,selectedValue:a}=e;const d=(Array.isArray(n)?n:[n]).filter(Boolean);if(s){const e=d.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:d.map(((e,s)=>(0,r.cloneElement)(e,{key:s,hidden:e.props.value!==a})))})}function x(e){const s=m(e);return(0,v.jsxs)("div",{className:(0,t.A)("tabs-container",A.tabList),children:[(0,v.jsx)(g,{...s,...e}),(0,v.jsx)(f,{...s,...e})]})}function j(e){const s=(0,P.A)();return(0,v.jsx)(x,{...e,children:c(e.children)},String(s))}},77980:(e,s,n)=>{n.d(s,{A:()=>r});const r=n.p+"assets/images/create-business-partner-address-0428b37bec99b373a06719f500190dcd.png"},28453:(e,s,n)=>{n.d(s,{R:()=>d,x:()=>i});var r=n(96540);const t={},a=r.createContext(t);function d(e){const s=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(a.Provider,{value:s},e.children)}}}]);